
Aufgabe4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000142  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000ee  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000142  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000174  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  000001b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006a9  00000000  00000000  000001d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000605  00000000  00000000  0000087d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000268  00000000  00000000  00000e82  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  000010ec  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000035a  00000000  00000000  00001110  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000c4  00000000  00000000  0000146a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  0000152e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 75 00 	jmp	0xea	; 0xea <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:
	Alle Bits des DataDirectionRegister von Port D
	(DDRD) werden auf LOW gesetzt, sind somit als
	Eingang konfiguriert.
	In Binärschreibweise ist DDRD jetzt: 00000000 
	*/
	DDRD = 0x00;
  80:	1a b8       	out	0x0a, r1	; 10
	/*	
	Das Bit an 8. Stelle (D7) wird auf Eins
	gesetzt -> Ausgang
	In Binärschreibweise ist DDRD jetzt: 10000000
	*/
	DDRD |= (1 << DDD7);
  82:	57 9a       	sbi	0x0a, 7	; 10
	Das Bit an 8. Stelle (D7) von PortD wird jetzt
	auf HIGH gesetzt. Die anderen Bits von Port D
	bleiben unverändert.
	In Binärschreibweise ist PortD jetzt: 1xxxxxxx
	*/
	PORTD &= ~(1 << PORTD7);
  84:	5f 98       	cbi	0x0b, 7	; 11
	Das Bit an der 2. Stelle von Port D (DDD2) wird
	auf LOW gesetzt. Wenn diese Bit als Eingang definiert
	ist, wird dadurch der Pull-Up Widerstand deaktiviert. 
	In Binärschreibweise ist PortD jetzt: xxxxx0xx
	*/
	PORTD &= ~(1 << DDD2);
  86:	5a 98       	cbi	0x0b, 2	; 11
	Das Bit an der 3. Stelle von Port D (DDD3) wird
	auf LOW gesetzt. Wenn diese Bit als Eingang definiert
	ist, wird dadurch der Pull-Up Widerstand deaktiviert.
	In Binärschreibweise ist PortD jetzt: xxxx0xxx
	*/
	PORTD &= ~(1 << DDD3);
  88:	5b 98       	cbi	0x0b, 3	; 11
	
	// Flag, ob gerade ein WS sich im Sensorbereich am Bandanfang befindet
	int anfangBelegt = 0;

	// Flag, ob gerade ein WS sich im Sensorbereich am Bandende befindet
	int endeBelegt = 0;
  8a:	80 e0       	ldi	r24, 0x00	; 0
  8c:	90 e0       	ldi	r25, 0x00	; 0

	// Werkstück Counter, zählt wieviele WS sich auf dem Band befinden
	int wsCounter = 0;			
	
	// Flag, ob gerade ein WS sich im Sensorbereich am Bandanfang befindet
	int anfangBelegt = 0;
  8e:	20 e0       	ldi	r18, 0x00	; 0
  90:	30 e0       	ldi	r19, 0x00	; 0
	In Binärschreibweise ist PortD jetzt: xxxx0xxx
	*/
	PORTD &= ~(1 << DDD3);

	// Werkstück Counter, zählt wieviele WS sich auf dem Band befinden
	int wsCounter = 0;			
  92:	40 e0       	ldi	r20, 0x00	; 0
  94:	50 e0       	ldi	r21, 0x00	; 0
				// wsCounter um eins hochzählen
				wsCounter++;
			}
		} else {
			// Es befindet sich kein WS im Anfangsbereich
			anfangBelegt = 0;
  96:	70 e0       	ldi	r23, 0x00	; 0
  98:	60 e0       	ldi	r22, 0x00	; 0
			Prüfen ob anfangBelegt == 0 ist.  Falls ja, dann handelt
			es sich um eine steigende Flanke am Sensor
			*/
			if(anfangBelegt == 0) {
				// Werkstück ist neu am Anfang, daher anfangBelegt setzen
				anfangBelegt = 1;
  9a:	f1 e0       	ldi	r31, 0x01	; 1
  9c:	e0 e0       	ldi	r30, 0x00	; 0
	// Flag, ob gerade ein WS sich im Sensorbereich am Bandende befindet
	int endeBelegt = 0;

	while(1) {
		// Prüfen, ob der Endlagensensor am Bandanfang aktiv ist
		if( (PIND & (1 << PIND2)) ) {
  9e:	4a 9b       	sbis	0x09, 2	; 9
  a0:	08 c0       	rjmp	.+16     	; 0xb2 <main+0x32>
			/* 
			Prüfen ob anfangBelegt == 0 ist.  Falls ja, dann handelt
			es sich um eine steigende Flanke am Sensor
			*/
			if(anfangBelegt == 0) {
  a2:	21 15       	cp	r18, r1
  a4:	31 05       	cpc	r19, r1
  a6:	39 f4       	brne	.+14     	; 0xb6 <main+0x36>
				// Werkstück ist neu am Anfang, daher anfangBelegt setzen
				anfangBelegt = 1;
				// wsCounter um eins hochzählen
				wsCounter++;
  a8:	4f 5f       	subi	r20, 0xFF	; 255
  aa:	5f 4f       	sbci	r21, 0xFF	; 255
			Prüfen ob anfangBelegt == 0 ist.  Falls ja, dann handelt
			es sich um eine steigende Flanke am Sensor
			*/
			if(anfangBelegt == 0) {
				// Werkstück ist neu am Anfang, daher anfangBelegt setzen
				anfangBelegt = 1;
  ac:	2f 2f       	mov	r18, r31
  ae:	3e 2f       	mov	r19, r30
  b0:	02 c0       	rjmp	.+4      	; 0xb6 <main+0x36>
				// wsCounter um eins hochzählen
				wsCounter++;
			}
		} else {
			// Es befindet sich kein WS im Anfangsbereich
			anfangBelegt = 0;
  b2:	27 2f       	mov	r18, r23
  b4:	36 2f       	mov	r19, r22
		}

		// Prüfen, ob der Endlagensensor am Bandende aktiv ist
		if( (PIND & (1 << PIND3)) ) {
  b6:	4b 99       	sbic	0x09, 3	; 9
  b8:	14 c0       	rjmp	.+40     	; 0xe2 <main+0x62>
			/* 
			Falls endeBelegt == 1 ist, dann hat ein Werkstück
			den Sensorbereich am Bandende verlassen.
			endeBelegt wird wieder auf 0 gesetzt
			*/
			if(endeBelegt == 1) {			
  ba:	81 30       	cpi	r24, 0x01	; 1
  bc:	91 05       	cpc	r25, r1
  be:	41 f4       	brne	.+16     	; 0xd0 <main+0x50>
				endeBelegt = 0;
				// wsCounter um eins hochzählen
				wsCounter--;
  c0:	41 50       	subi	r20, 0x01	; 1
  c2:	51 09       	sbc	r21, r1
			}
		}

		if(wsCounter > 0 && endeBelegt == 0) {
  c4:	14 16       	cp	r1, r20
  c6:	15 06       	cpc	r1, r21
  c8:	44 f0       	brlt	.+16     	; 0xda <main+0x5a>
			Falls endeBelegt == 1 ist, dann hat ein Werkstück
			den Sensorbereich am Bandende verlassen.
			endeBelegt wird wieder auf 0 gesetzt
			*/
			if(endeBelegt == 1) {			
				endeBelegt = 0;
  ca:	87 2f       	mov	r24, r23
  cc:	96 2f       	mov	r25, r22
  ce:	0b c0       	rjmp	.+22     	; 0xe6 <main+0x66>
				// wsCounter um eins hochzählen
				wsCounter--;
			}
		}

		if(wsCounter > 0 && endeBelegt == 0) {
  d0:	14 16       	cp	r1, r20
  d2:	15 06       	cpc	r1, r21
  d4:	44 f4       	brge	.+16     	; 0xe6 <main+0x66>
  d6:	00 97       	sbiw	r24, 0x00	; 0
  d8:	31 f4       	brne	.+12     	; 0xe6 <main+0x66>
			// Förderband vorwärts drehen
			PORTD |= (1 << DDD7);
  da:	5f 9a       	sbi	0x0b, 7	; 11
  dc:	87 2f       	mov	r24, r23
  de:	96 2f       	mov	r25, r22
  e0:	de cf       	rjmp	.-68     	; 0x9e <main+0x1e>
		}

		// Prüfen, ob der Endlagensensor am Bandende aktiv ist
		if( (PIND & (1 << PIND3)) ) {
			// Es befindet sich ein WS im Endbereich
			endeBelegt = 1;			
  e2:	8f 2f       	mov	r24, r31
  e4:	9e 2f       	mov	r25, r30
		if(wsCounter > 0 && endeBelegt == 0) {
			// Förderband vorwärts drehen
			PORTD |= (1 << DDD7);
		} else {
			// Förderband anhalten
			PORTD &= ~(1 << DDD7);
  e6:	5f 98       	cbi	0x0b, 7	; 11
  e8:	da cf       	rjmp	.-76     	; 0x9e <main+0x1e>

000000ea <_exit>:
  ea:	f8 94       	cli

000000ec <__stop_program>:
  ec:	ff cf       	rjmp	.-2      	; 0xec <__stop_program>


Aufgabe6.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000002a2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000022e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  00800100  00800100  000002a2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002a2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002d4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  00000314  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000804  00000000  00000000  00000354  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006cb  00000000  00000000  00000b58  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003be  00000000  00000000  00001223  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000070  00000000  00000000  000015e4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000413  00000000  00000000  00001654  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000077  00000000  00000000  00001a67  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  00001ade  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 c8 00 	jmp	0x190	; 0x190 <__vector_16>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a6 30       	cpi	r26, 0x06	; 6
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <main>
  88:	0c 94 15 01 	jmp	0x22a	; 0x22a <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <configureIO>:
	Alle Bits des DataDirectionRegister von Port B
	(DDRB) werden auf LOW gesetzt, sind somit als
	Eingang konfiguriert.
	In Binärschreibweise ist DDRB jetzt: 00000000 
	*/
	DDRB = 0x00;
  90:	14 b8       	out	0x04, r1	; 4
	/*	
	Das Bit an 1. Stelle (B0) wird auf Eins
	gesetzt -> Ausgang
	In Binärschreibweise ist DDRB jetzt: 00000001
	*/
	DDRB |= (1 << DDB0);
  92:	20 9a       	sbi	0x04, 0	; 4
	Alle Bits des DataDirectionRegister von Port D
	(DDRD) werden auf LOW gesetzt, sind somit als
	Eingang konfiguriert.
	In Binärschreibweise ist DDRD jetzt: 00000000 
	*/
	DDRD = 0x00;
  94:	1a b8       	out	0x0a, r1	; 10
	/*	
	Das Bit an 8. Stelle (D7) wird auf Eins
	gesetzt -> Ausgang
	In Binärschreibweise ist DDRD jetzt: 10000000
	*/
	DDRD |= (1 << DDD7);
  96:	57 9a       	sbi	0x0a, 7	; 10
	Das Bit an 8. Stelle (D7) von PortD wird jetzt
	auf HIGH gesetzt. Die anderen Bits von Port D
	bleiben unverändert.
	In Binärschreibweise ist PortD jetzt: 1xxxxxxx
	*/
	PORTD &= ~(1 << PORTD7);
  98:	5f 98       	cbi	0x0b, 7	; 11
	Das Bit an der 3. Stelle von Port D (DDD2) wird
	auf LOW gesetzt. Wenn diese Bit als Eingang definiert
	ist, wird dadurch der Pull-Up Widerstand deaktiviert. 
	In Binärschreibweise ist PortD jetzt: xxxxx0xx
	*/
	PORTD &= ~(1 << DDD2);
  9a:	5a 98       	cbi	0x0b, 2	; 11
	Das Bit an der 4. Stelle von Port D (DDD3) wird
	auf LOW gesetzt. Wenn diese Bit als Eingang definiert
	ist, wird dadurch der Pull-Up Widerstand deaktiviert.
	In Binärschreibweise ist PortD jetzt: xxxx0xxx
	*/
	PORTD &= ~(1 << DDD3);
  9c:	5b 98       	cbi	0x0b, 3	; 11
	Das Bit an der 6. Stelle von Port D (DDD5) wird
	auf LOW gesetzt. Wenn diese Bit als Eingang definiert
	ist, wird dadurch der Pull-Up Widerstand deaktiviert.
	In Binärschreibweise ist PortD jetzt: xx0xxxxx
	*/
	PORTD &= ~(1 << DDD5);
  9e:	5d 98       	cbi	0x0b, 5	; 11
  a0:	08 95       	ret

000000a2 <configureTimer>:
	/*
	Timer Counter Control Register 0 A (TCCR0A)
	Register auf 0 setzen (default)
	Weiter Informationen siehe ATmega328P Handbuch
	*/
	TCCR0A = 0x00;
  a2:	14 bc       	out	0x24, r1	; 36
	/*
	Timer Counter Control Register 0 B (TCCR0B)
	Register auf 0 setzen (default)
	Die drei Bits CS00, CS01 und CS02 konfigurieren den Prescaler
	*/
	TCCR0B = 0x00;
  a4:	15 bc       	out	0x25, r1	; 37
	TCCR0B &= ~(1 << CS02);
  a6:	85 b5       	in	r24, 0x25	; 37
  a8:	8b 7f       	andi	r24, 0xFB	; 251
  aa:	85 bd       	out	0x25, r24	; 37
	TCCR0B &= ~(1 << CS01);
  ac:	85 b5       	in	r24, 0x25	; 37
  ae:	8d 7f       	andi	r24, 0xFD	; 253
  b0:	85 bd       	out	0x25, r24	; 37
	TCCR0B |= (1 << CS00);
  b2:	85 b5       	in	r24, 0x25	; 37
  b4:	81 60       	ori	r24, 0x01	; 1
  b6:	85 bd       	out	0x25, r24	; 37

	/*
	TC0 Interrupt Mask Register (TIMSK0)
	Das Bit TOIE aktiviert den Overflow Interrupt
	*/
	TIMSK0 = 0x00;
  b8:	ee e6       	ldi	r30, 0x6E	; 110
  ba:	f0 e0       	ldi	r31, 0x00	; 0
  bc:	10 82       	st	Z, r1
	TIMSK0 |= (1 << TOIE0);
  be:	80 81       	ld	r24, Z
  c0:	81 60       	ori	r24, 0x01	; 1
  c2:	80 83       	st	Z, r24
  c4:	08 95       	ret

000000c6 <runInkrementSensorCheck>:
}

void runInkrementSensorCheck() {
	if( (PIND & (1 << PIND5)) ) {
  c6:	4d 9b       	sbis	0x09, 5	; 9
  c8:	32 c0       	rjmp	.+100    	; 0x12e <runInkrementSensorCheck+0x68>
		if(sensorSchwarz == 0) {
  ca:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
  ce:	81 11       	cpse	r24, r1
  d0:	2a c0       	rjmp	.+84     	; 0x126 <runInkrementSensorCheck+0x60>
			// Flanke erkannt
			if(PORTD & (1 << PORTD7)) {
  d2:	5f 9b       	sbis	0x0b, 7	; 11
  d4:	13 c0       	rjmp	.+38     	; 0xfc <runInkrementSensorCheck+0x36>
				// Bei Vorwärtsfahrt hochzählen
				nInkremente++;
  d6:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <nInkremente>
  da:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <nInkremente+0x1>
  de:	a0 91 04 01 	lds	r26, 0x0104	; 0x800104 <nInkremente+0x2>
  e2:	b0 91 05 01 	lds	r27, 0x0105	; 0x800105 <nInkremente+0x3>
  e6:	01 96       	adiw	r24, 0x01	; 1
  e8:	a1 1d       	adc	r26, r1
  ea:	b1 1d       	adc	r27, r1
  ec:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <nInkremente>
  f0:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <nInkremente+0x1>
  f4:	a0 93 04 01 	sts	0x0104, r26	; 0x800104 <nInkremente+0x2>
  f8:	b0 93 05 01 	sts	0x0105, r27	; 0x800105 <nInkremente+0x3>
			}
			if(PORTB & (1 << PORTB0)) {
  fc:	28 9b       	sbis	0x05, 0	; 5
  fe:	13 c0       	rjmp	.+38     	; 0x126 <runInkrementSensorCheck+0x60>
				// Bei Rückwärtsfahrt runterzählen
				nInkremente++;
 100:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <nInkremente>
 104:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <nInkremente+0x1>
 108:	a0 91 04 01 	lds	r26, 0x0104	; 0x800104 <nInkremente+0x2>
 10c:	b0 91 05 01 	lds	r27, 0x0105	; 0x800105 <nInkremente+0x3>
 110:	01 96       	adiw	r24, 0x01	; 1
 112:	a1 1d       	adc	r26, r1
 114:	b1 1d       	adc	r27, r1
 116:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <nInkremente>
 11a:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <nInkremente+0x1>
 11e:	a0 93 04 01 	sts	0x0104, r26	; 0x800104 <nInkremente+0x2>
 122:	b0 93 05 01 	sts	0x0105, r27	; 0x800105 <nInkremente+0x3>
			}
		}
		sensorSchwarz = 1;
 126:	81 e0       	ldi	r24, 0x01	; 1
 128:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
 12c:	08 95       	ret
	}else {
		if(sensorSchwarz == 1) {
 12e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 132:	81 30       	cpi	r24, 0x01	; 1
 134:	51 f5       	brne	.+84     	; 0x18a <runInkrementSensorCheck+0xc4>
			// Flanke erkannt
			if(PORTD & (1 << PORTD7)) {
 136:	5f 9b       	sbis	0x0b, 7	; 11
 138:	13 c0       	rjmp	.+38     	; 0x160 <runInkrementSensorCheck+0x9a>
				// Bei Vorwärtsfahrt hochzählen
				nInkremente++;
 13a:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <nInkremente>
 13e:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <nInkremente+0x1>
 142:	a0 91 04 01 	lds	r26, 0x0104	; 0x800104 <nInkremente+0x2>
 146:	b0 91 05 01 	lds	r27, 0x0105	; 0x800105 <nInkremente+0x3>
 14a:	01 96       	adiw	r24, 0x01	; 1
 14c:	a1 1d       	adc	r26, r1
 14e:	b1 1d       	adc	r27, r1
 150:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <nInkremente>
 154:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <nInkremente+0x1>
 158:	a0 93 04 01 	sts	0x0104, r26	; 0x800104 <nInkremente+0x2>
 15c:	b0 93 05 01 	sts	0x0105, r27	; 0x800105 <nInkremente+0x3>
			}
			if(PORTB & (1 << PORTB0)) {
 160:	28 9b       	sbis	0x05, 0	; 5
 162:	13 c0       	rjmp	.+38     	; 0x18a <runInkrementSensorCheck+0xc4>
				// Bei Rückwärtsfahrt runterzählen
				nInkremente++;
 164:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <nInkremente>
 168:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <nInkremente+0x1>
 16c:	a0 91 04 01 	lds	r26, 0x0104	; 0x800104 <nInkremente+0x2>
 170:	b0 91 05 01 	lds	r27, 0x0105	; 0x800105 <nInkremente+0x3>
 174:	01 96       	adiw	r24, 0x01	; 1
 176:	a1 1d       	adc	r26, r1
 178:	b1 1d       	adc	r27, r1
 17a:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <nInkremente>
 17e:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <nInkremente+0x1>
 182:	a0 93 04 01 	sts	0x0104, r26	; 0x800104 <nInkremente+0x2>
 186:	b0 93 05 01 	sts	0x0105, r27	; 0x800105 <nInkremente+0x3>
			}
		}
		sensorSchwarz = 0;
 18a:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
 18e:	08 95       	ret

00000190 <__vector_16>:
	TIMER0_OVF_vect ist der Interrupt Vector für einen
	Overflow von Timer 0

	ISR ist die Interrupt Service Routine
*/
ISR(TIMER0_OVF_vect) {
 190:	1f 92       	push	r1
 192:	0f 92       	push	r0
 194:	0f b6       	in	r0, 0x3f	; 63
 196:	0f 92       	push	r0
 198:	11 24       	eor	r1, r1
	312500 Überläufe entsprechen 5 s
	*/
	//if(iCounter > 312500) {
	//	iCounter = 0;
	//}
}
 19a:	0f 90       	pop	r0
 19c:	0f be       	out	0x3f, r0	; 63
 19e:	0f 90       	pop	r0
 1a0:	1f 90       	pop	r1
 1a2:	18 95       	reti

000001a4 <main>:

int main() {

	configureIO();
 1a4:	0e 94 48 00 	call	0x90	; 0x90 <configureIO>
	configureTimer();
 1a8:	0e 94 51 00 	call	0xa2	; 0xa2 <configureTimer>
	
	// Setze die Intterupt Register Bits
	sei();		
 1ac:	78 94       	sei
				// Anhalten
				PORTD &= ~(1 << PORTD7);
				PORTB &= ~(1 << PORTB0);

				// Status auf 1 wechseln
				status = 1;
 1ae:	d1 e0       	ldi	r29, 0x01	; 1

			// Vorwärtsdrehen
			PORTD |= (1 << PORTD7);
			
			// Status auf 2 setzen
			status = 2;			
 1b0:	c2 e0       	ldi	r28, 0x02	; 2
	// Setze die Intterupt Register Bits
	sei();		

	while(1) {
		// Prüfen, ob Positionssensor inkrementiert wird
		runInkrementSensorCheck();
 1b2:	0e 94 63 00 	call	0xc6	; 0xc6 <runInkrementSensorCheck>

		// Prüfen, ob der Endlagensensor am Bandanfang aktiv ist
		if(status == 0) {
 1b6:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <status>
 1ba:	81 11       	cpse	r24, r1
 1bc:	15 c0       	rjmp	.+42     	; 0x1e8 <main+0x44>
			// Werkstück am Bandanfang eingelegt
			if( (PIND & (1 << PIND2)) ) {
 1be:	4a 9b       	sbis	0x09, 2	; 9
 1c0:	13 c0       	rjmp	.+38     	; 0x1e8 <main+0x44>
				// Fahre 2 Sekunden vorwärts
				PORTD |= (1 << PORTD7);
 1c2:	5f 9a       	sbi	0x0b, 7	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1c4:	2f ef       	ldi	r18, 0xFF	; 255
 1c6:	89 e6       	ldi	r24, 0x69	; 105
 1c8:	98 e1       	ldi	r25, 0x18	; 24
 1ca:	21 50       	subi	r18, 0x01	; 1
 1cc:	80 40       	sbci	r24, 0x00	; 0
 1ce:	90 40       	sbci	r25, 0x00	; 0
 1d0:	e1 f7       	brne	.-8      	; 0x1ca <main+0x26>
 1d2:	00 c0       	rjmp	.+0      	; 0x1d4 <main+0x30>
 1d4:	00 00       	nop
				_delay_ms(500);
				PORTD &= ~(1 << PORTD7);
 1d6:	5f 98       	cbi	0x0b, 7	; 11

				// Fahre Rückwärts bis zum Sensor
				PORTD &= ~(1 << PORTD7);
 1d8:	5f 98       	cbi	0x0b, 7	; 11
				PORTB |= (1 << PORTB0);
 1da:	28 9a       	sbi	0x05, 0	; 5

				while( !(PIND & (1 << PIND2)) ) {
 1dc:	4a 9b       	sbis	0x09, 2	; 9
 1de:	fe cf       	rjmp	.-4      	; 0x1dc <main+0x38>
					// Warten bis PIND2 auf HIGH geht
				}

				// Anhalten
				PORTD &= ~(1 << PORTD7);
 1e0:	5f 98       	cbi	0x0b, 7	; 11
				PORTB &= ~(1 << PORTB0);
 1e2:	28 98       	cbi	0x05, 0	; 5

				// Status auf 1 wechseln
				status = 1;
 1e4:	d0 93 01 01 	sts	0x0101, r29	; 0x800101 <status>
			}		
		}
		if(status == 1) {
 1e8:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <status>
 1ec:	81 30       	cpi	r24, 0x01	; 1
 1ee:	59 f4       	brne	.+22     	; 0x206 <main+0x62>
			// Inkremente Counter auf 0 setzen
			nInkremente = 0;
 1f0:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <nInkremente>
 1f4:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <nInkremente+0x1>
 1f8:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <nInkremente+0x2>
 1fc:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <nInkremente+0x3>

			// Vorwärtsdrehen
			PORTD |= (1 << PORTD7);
 200:	5f 9a       	sbi	0x0b, 7	; 11
			
			// Status auf 2 setzen
			status = 2;			
 202:	c0 93 01 01 	sts	0x0101, r28	; 0x800101 <status>
		}
		if(status == 2) {
 206:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <status>
 20a:	82 30       	cpi	r24, 0x02	; 2
 20c:	91 f6       	brne	.-92     	; 0x1b2 <main+0xe>
			int mittelposition = 35;

			if(nInkremente >= mittelposition) {
 20e:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <nInkremente>
 212:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <nInkremente+0x1>
 216:	a0 91 04 01 	lds	r26, 0x0104	; 0x800104 <nInkremente+0x2>
 21a:	b0 91 05 01 	lds	r27, 0x0105	; 0x800105 <nInkremente+0x3>
 21e:	83 97       	sbiw	r24, 0x23	; 35
 220:	a1 05       	cpc	r26, r1
 222:	b1 05       	cpc	r27, r1
 224:	30 f2       	brcs	.-116    	; 0x1b2 <main+0xe>
				// anhalten
				PORTD &= ~(1 << PORTD7);
 226:	5f 98       	cbi	0x0b, 7	; 11
 228:	c4 cf       	rjmp	.-120    	; 0x1b2 <main+0xe>

0000022a <_exit>:
 22a:	f8 94       	cli

0000022c <__stop_program>:
 22c:	ff cf       	rjmp	.-2      	; 0x22c <__stop_program>

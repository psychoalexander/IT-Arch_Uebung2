
Aufgabe5.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000250  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001dc  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000007  00800100  00800100  00000250  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000250  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000280  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000038  00000000  00000000  000002c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000072f  00000000  00000000  000002f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000649  00000000  00000000  00000a27  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002f6  00000000  00000000  00001070  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000078  00000000  00000000  00001368  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000393  00000000  00000000  000013e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000070  00000000  00000000  00001773  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000028  00000000  00000000  000017e3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__vector_16>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a7 30       	cpi	r26, 0x07	; 7
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 a6 00 	call	0x14c	; 0x14c <main>
  88:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <configureIO>:
	Alle Bits des DataDirectionRegister von Port D
	(DDRD) werden auf LOW gesetzt, sind somit als
	Eingang konfiguriert.
	In Binärschreibweise ist DDRD jetzt: 00000000 
	*/
	DDRD = 0x00;
  90:	1a b8       	out	0x0a, r1	; 10
	/*	
	Das Bit an 8. Stelle (D7) wird auf Eins
	gesetzt -> Ausgang
	In Binärschreibweise ist DDRD jetzt: 10000000
	*/
	DDRD |= (1 << DDD7);
  92:	57 9a       	sbi	0x0a, 7	; 10
	Das Bit an 8. Stelle (D7) von PortD wird jetzt
	auf HIGH gesetzt. Die anderen Bits von Port D
	bleiben unverändert.
	In Binärschreibweise ist PortD jetzt: 1xxxxxxx
	*/
	PORTD &= ~(1 << PORTD7);
  94:	5f 98       	cbi	0x0b, 7	; 11
	Das Bit an der 2. Stelle von Port D (DDD2) wird
	auf LOW gesetzt. Wenn diese Bit als Eingang definiert
	ist, wird dadurch der Pull-Up Widerstand deaktiviert. 
	In Binärschreibweise ist PortD jetzt: xxxxx0xx
	*/
	PORTD &= ~(1 << DDD2);
  96:	5a 98       	cbi	0x0b, 2	; 11
	Das Bit an der 3. Stelle von Port D (DDD3) wird
	auf LOW gesetzt. Wenn diese Bit als Eingang definiert
	ist, wird dadurch der Pull-Up Widerstand deaktiviert.
	In Binärschreibweise ist PortD jetzt: xxxx0xxx
	*/
	PORTD &= ~(1 << DDD3);
  98:	5b 98       	cbi	0x0b, 3	; 11
  9a:	08 95       	ret

0000009c <configureTimer>:
	/*
	Timer Counter Control Register 0 A (TCCR0A)
	Register auf 0 setzen (default)
	Weiter Informationen siehe ATmega328P Handbuch
	*/
	TCCR0A = 0x00;
  9c:	14 bc       	out	0x24, r1	; 36
	/*
	Timer Counter Control Register 0 B (TCCR0B)
	Register auf 0 setzen (default)
	Die drei Bits CS00, CS01 und CS02 konfigurieren den Prescaler
	*/
	TCCR0B = 0x00;
  9e:	15 bc       	out	0x25, r1	; 37
	TCCR0B &= ~(1 << CS02);
  a0:	85 b5       	in	r24, 0x25	; 37
  a2:	8b 7f       	andi	r24, 0xFB	; 251
  a4:	85 bd       	out	0x25, r24	; 37
	TCCR0B &= ~(1 << CS01);
  a6:	85 b5       	in	r24, 0x25	; 37
  a8:	8d 7f       	andi	r24, 0xFD	; 253
  aa:	85 bd       	out	0x25, r24	; 37
	TCCR0B |= (1 << CS00);
  ac:	85 b5       	in	r24, 0x25	; 37
  ae:	81 60       	ori	r24, 0x01	; 1
  b0:	85 bd       	out	0x25, r24	; 37

	/*
	TC0 Interrupt Mask Register (TIMSK0)
	Das Bit TOIE aktiviert den Overflow Interrupt
	*/
	TIMSK0 = 0x00;
  b2:	ee e6       	ldi	r30, 0x6E	; 110
  b4:	f0 e0       	ldi	r31, 0x00	; 0
  b6:	10 82       	st	Z, r1
	TIMSK0 |= (1 << TOIE0);
  b8:	80 81       	ld	r24, Z
  ba:	81 60       	ori	r24, 0x01	; 1
  bc:	80 83       	st	Z, r24
  be:	08 95       	ret

000000c0 <__vector_16>:
	TIMER0_OVF_vect ist der Interrupt Vector für einen
	Overflow von Timer 0

	ISR ist die Interrupt Service Routine
*/
ISR(TIMER0_OVF_vect) {
  c0:	1f 92       	push	r1
  c2:	0f 92       	push	r0
  c4:	0f b6       	in	r0, 0x3f	; 63
  c6:	0f 92       	push	r0
  c8:	11 24       	eor	r1, r1
  ca:	2f 93       	push	r18
  cc:	8f 93       	push	r24
  ce:	9f 93       	push	r25
  d0:	af 93       	push	r26
  d2:	bf 93       	push	r27
	// Falls vorwärts drehen, dann hochzählen
	if(PORTD &= (1 << DDD7)) {
  d4:	8b b1       	in	r24, 0x0b	; 11
  d6:	80 78       	andi	r24, 0x80	; 128
  d8:	8b b9       	out	0x0b, r24	; 11
  da:	88 23       	and	r24, r24
  dc:	99 f0       	breq	.+38     	; 0x104 <__vector_16+0x44>
		iCounter++;
  de:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <iCounter>
  e2:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <iCounter+0x1>
  e6:	a0 91 05 01 	lds	r26, 0x0105	; 0x800105 <iCounter+0x2>
  ea:	b0 91 06 01 	lds	r27, 0x0106	; 0x800106 <iCounter+0x3>
  ee:	01 96       	adiw	r24, 0x01	; 1
  f0:	a1 1d       	adc	r26, r1
  f2:	b1 1d       	adc	r27, r1
  f4:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <iCounter>
  f8:	90 93 04 01 	sts	0x0104, r25	; 0x800104 <iCounter+0x1>
  fc:	a0 93 05 01 	sts	0x0105, r26	; 0x800105 <iCounter+0x2>
 100:	b0 93 06 01 	sts	0x0106, r27	; 0x800106 <iCounter+0x3>
	f = 16 MHz / 256
	f = 62,5 KHz

	312500 Überläufe entsprechen 5 s
	*/
	if(iCounter > 312500) {
 104:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <iCounter>
 108:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <iCounter+0x1>
 10c:	a0 91 05 01 	lds	r26, 0x0105	; 0x800105 <iCounter+0x2>
 110:	b0 91 06 01 	lds	r27, 0x0106	; 0x800106 <iCounter+0x3>
 114:	85 3b       	cpi	r24, 0xB5	; 181
 116:	94 4c       	sbci	r25, 0xC4	; 196
 118:	a4 40       	sbci	r26, 0x04	; 4
 11a:	b1 05       	cpc	r27, r1
 11c:	68 f0       	brcs	.+26     	; 0x138 <__vector_16+0x78>
		if(wsCounter > 0) {
 11e:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <wsCounter>
 122:	81 11       	cpse	r24, r1
			wsCounter = 0;
 124:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <wsCounter>
		}
		iCounter = 0;
 128:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <iCounter>
 12c:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <iCounter+0x1>
 130:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <iCounter+0x2>
 134:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <iCounter+0x3>
	}
}
 138:	bf 91       	pop	r27
 13a:	af 91       	pop	r26
 13c:	9f 91       	pop	r25
 13e:	8f 91       	pop	r24
 140:	2f 91       	pop	r18
 142:	0f 90       	pop	r0
 144:	0f be       	out	0x3f, r0	; 63
 146:	0f 90       	pop	r0
 148:	1f 90       	pop	r1
 14a:	18 95       	reti

0000014c <main>:

int main() {

	configureIO();
 14c:	0e 94 48 00 	call	0x90	; 0x90 <configureIO>
	configureTimer();
 150:	0e 94 4e 00 	call	0x9c	; 0x9c <configureTimer>
	
	// Setze die Intterupt Register Bits
	sei();		
 154:	78 94       	sei
			Prüfen ob anfangBelegt == 0 ist.  Falls ja, dann handelt
			es sich um eine steigende Flanke am Sensor
			*/
			if(anfangBelegt == 0) {
				// Werkstück ist neu am Anfang, daher anfangBelegt setzen
				anfangBelegt = 1;
 156:	91 e0       	ldi	r25, 0x01	; 1
	// Setze die Intterupt Register Bits
	sei();		

	while(1) {
		// Prüfen, ob der Endlagensensor am Bandanfang aktiv ist
		if( (PIND & (1 << PIND2)) ) {
 158:	4a 9b       	sbis	0x09, 2	; 9
 15a:	14 c0       	rjmp	.+40     	; 0x184 <main+0x38>
			/* 
			Prüfen ob anfangBelegt == 0 ist.  Falls ja, dann handelt
			es sich um eine steigende Flanke am Sensor
			*/
			if(anfangBelegt == 0) {
 15c:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <anfangBelegt>
 160:	81 11       	cpse	r24, r1
 162:	12 c0       	rjmp	.+36     	; 0x188 <main+0x3c>
				// Werkstück ist neu am Anfang, daher anfangBelegt setzen
				anfangBelegt = 1;
 164:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <anfangBelegt>
				// wsCounter um eins hochzählen
				wsCounter++;
 168:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <wsCounter>
 16c:	8f 5f       	subi	r24, 0xFF	; 255
 16e:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <wsCounter>
				// Interrupt Counter auf 0 setzen
				iCounter = 0;
 172:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <iCounter>
 176:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <iCounter+0x1>
 17a:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <iCounter+0x2>
 17e:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <iCounter+0x3>
 182:	02 c0       	rjmp	.+4      	; 0x188 <main+0x3c>
			}
		} else {
			// Es befindet sich kein WS im Anfangsbereich
			anfangBelegt = 0;
 184:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <anfangBelegt>
		}

		// Prüfen, ob der Endlagensensor am Bandende aktiv ist
		if( (PIND & (1 << PIND3)) ) {
 188:	4b 9b       	sbis	0x09, 3	; 9
 18a:	03 c0       	rjmp	.+6      	; 0x192 <main+0x46>
			// Es befindet sich ein WS im Endbereich, endeBelegt auf 1 setzen
			endeBelegt = 1;
 18c:	90 93 00 01 	sts	0x0100, r25	; 0x800100 <_edata>
 190:	17 c0       	rjmp	.+46     	; 0x1c0 <main+0x74>
			Falls endeBelegt == 1 ist, dann hat ein Werkstück
			den Sensorbereich am Bandende verlassen.
			endeBelegt wird wieder auf 0 gesetzt
			wsCounter wird eins heruntergezählt
			*/
			if(endeBelegt == 1) {			
 192:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 196:	81 30       	cpi	r24, 0x01	; 1
 198:	99 f4       	brne	.+38     	; 0x1c0 <main+0x74>
				endeBelegt = 0;
 19a:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
				if(wsCounter > 0) {
 19e:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <wsCounter>
 1a2:	88 23       	and	r24, r24
 1a4:	69 f0       	breq	.+26     	; 0x1c0 <main+0x74>
					wsCounter--;
 1a6:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <wsCounter>
 1aa:	81 50       	subi	r24, 0x01	; 1
 1ac:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <wsCounter>
					// Interrupt Counter auf 0 setzen
					iCounter = 0;
 1b0:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <iCounter>
 1b4:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <iCounter+0x1>
 1b8:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <iCounter+0x2>
 1bc:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <iCounter+0x3>
				}
			}
		}

		if(wsCounter > 0 && endeBelegt == 0) {
 1c0:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <wsCounter>
 1c4:	88 23       	and	r24, r24
 1c6:	31 f0       	breq	.+12     	; 0x1d4 <main+0x88>
 1c8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 1cc:	81 11       	cpse	r24, r1
 1ce:	02 c0       	rjmp	.+4      	; 0x1d4 <main+0x88>
			// Förderband vorwärts drehen
			PORTD |= (1 << DDD7);
 1d0:	5f 9a       	sbi	0x0b, 7	; 11
 1d2:	c2 cf       	rjmp	.-124    	; 0x158 <main+0xc>
		} else {
			// Förderband anhalten
			PORTD &= ~(1 << DDD7);
 1d4:	5f 98       	cbi	0x0b, 7	; 11
 1d6:	c0 cf       	rjmp	.-128    	; 0x158 <main+0xc>

000001d8 <_exit>:
 1d8:	f8 94       	cli

000001da <__stop_program>:
 1da:	ff cf       	rjmp	.-2      	; 0x1da <__stop_program>
